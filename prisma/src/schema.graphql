# import User, Product, ProductConnection, Brand, Category, Variant, Option, Attribute, SelectedOption, Cart, OrderLineItem, PageInfo, AggregateProduct, ProductConnection, ProductSubscriptionPayload, OrderSubscriptionPayload; Order, OrderStatus, Shop from "./generated/prisma.graphql"
# import ProductCreateInput, BrandCreateInput, CategoryCreateInput from "./generated/prisma.graphql"
# import ProductWhereInput, ProductOrderByInput from "./generated/prisma.graphql"

type Query {
  me: User

  allProducts: [Product!]
  allBrands(categoryId: ID): [Brand!]
  allOptions(categoryId: ID): [Option!]!
  allAttributes(categoryId: ID): [Attribute!]!
  allCategories: [Category!]
  allOrders: [Order!]!
  allCustomers: [User!]!
  allShops: [Shop!]!
  
  product(id: ID!): Product

  searchProducts(
    productName: String
    brandsIds: [ID],
    attributesIds: [ID],
    optionsValuesIds: [ID],
    categoryId: ID,
    first: Int!,
    skip: Int!
  ): ProductConnection!
}

type Mutation {
  signup(email: String!, password: String!, firstName: String!, lastName: String!, shopId: ID!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  # Upsert mutations
  upsertBrand(brandId: ID, categoryId: ID!, name: String!): Brand
  upsertAttribute(attributeId: ID, categoryId: ID!, value: String!): Attribute
  upsertCategory(categoryId: ID, name: String!): Category
  upsertOption(optionId: ID, name: String!, values: [OptionValueInput!]!, categoryId: ID!): Option
  upsertProduct(
    productId: ID,
    name: String!,
    categoryId: ID!,
    brandId: ID!,
    available: Boolean!,
    optionIds: [ID!]!,
    variants: [ProductVariantInput!]!,
    attributesIds: [ID!]!,
    unavailableOptionsValuesIds: [ID!]!,
    displayPrice: Float!,
    imageUrl: String
  ): Product

  #Shop mutations
  upsertBestSellerProducts(bestSellerProducts: [OrderableProductInput!]!): Shop!
  upsertNewProducts(newProducts: [OrderableProductInput!]!): Shop!
  updateMOTD(MOTD: String!): Shop!

  # Delete mutations
  deleteProduct(productId: ID!): Product
  deleteOption(optionId: ID!): Option
  deleteBrand(brandId: ID!): Brand
  deleteAttribute(attributeId: ID!): Attribute
  deleteCategory(categoryId: ID!): Category

  #Cart mutations
  addItemToCart(variantId: ID!, quantity: Int!): OrderLineItem!
  addOrderToCart(orderId: ID!, replace: Boolean!): [OrderLineItem!]!
  removeItemFromCart(lineItemId: ID!): OrderLineItem!
  updateItemFromCart(lineItemId: ID!, variantId: ID!, quantity: Int!): OrderLineItem!

  #Order mutations
  setOrderAsPrepared(orderId: ID!): Order #Can be updated only by admins (eg: to set order as prepared)

  #Stripe mutations
  pay(stripeTokenId: String!): PayPayload

  #User mutations
  updateUser(firstName: String, lastName: String, oneSignalUserId: String, selectedShopId: ID): User
}

type Subscription {
  updatedProduct: ProductSubscriptionPayload
  waitFor3DSecure(orderId: ID!): OrderSubscriptionPayload
}

type PayPayload {
  order: Order
  redirectUrl: String
}

input OptionValueInput {
  id: ID
  value: String!
}

input ProductVariantInput {
  id: ID
  price: Float!
  available: Boolean!
  selectedOptions: [SelectedOptionInput!]!
}

input SelectedOptionInput {
  optionId: ID!
  valueId: ID!
}

input OrderableProductInput {
  id: ID,
  productId: ID!
  position: Int!
}

type AuthPayload {
  token: String!
  user: User!
}
