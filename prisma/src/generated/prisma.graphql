# source: http://localhost:4466/aromaclop/dev1
# timestamp: Mon Jun 11 2018 21:16:47 GMT+0200 (CEST)

type AggregateAttribute {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateOption {
  count: Int!
}

type AggregateOptionValue {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderableProduct {
  count: Int!
}

type AggregateOrderLineItem {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateSelectedOption {
  count: Int!
}

type AggregateShop {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVariant {
  count: Int!
}

type Attribute implements Node {
  id: ID!
  value: String!
  category(where: CategoryWhereInput): Category!
  shop(where: ShopWhereInput): Shop!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type AttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeEdge]!
  aggregate: AggregateAttribute!
}

input AttributeCreateInput {
  value: String!
  category: CategoryCreateOneInput!
  shop: ShopCreateOneInput!
  products: ProductCreateManyWithoutAttributesInput
}

input AttributeCreateManyWithoutProductsInput {
  create: [AttributeCreateWithoutProductsInput!]
  connect: [AttributeWhereUniqueInput!]
}

input AttributeCreateWithoutProductsInput {
  value: String!
  category: CategoryCreateOneInput!
  shop: ShopCreateOneInput!
}

"""An edge in a connection."""
type AttributeEdge {
  """The item at the end of the edge."""
  node: Attribute!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttributeOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AttributePreviousValues {
  id: ID!
  value: String!
}

type AttributeSubscriptionPayload {
  mutation: MutationType!
  node: Attribute
  updatedFields: [String!]
  previousValues: AttributePreviousValues
}

input AttributeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttributeWhereInput
}

input AttributeUpdateInput {
  value: String
  category: CategoryUpdateOneInput
  shop: ShopUpdateOneInput
  products: ProductUpdateManyWithoutAttributesInput
}

input AttributeUpdateManyWithoutProductsInput {
  create: [AttributeCreateWithoutProductsInput!]
  connect: [AttributeWhereUniqueInput!]
  disconnect: [AttributeWhereUniqueInput!]
  delete: [AttributeWhereUniqueInput!]
  update: [AttributeUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [AttributeUpsertWithWhereUniqueWithoutProductsInput!]
}

input AttributeUpdateWithoutProductsDataInput {
  value: String
  category: CategoryUpdateOneInput
  shop: ShopUpdateOneInput
}

input AttributeUpdateWithWhereUniqueWithoutProductsInput {
  where: AttributeWhereUniqueInput!
  data: AttributeUpdateWithoutProductsDataInput!
}

input AttributeUpsertWithWhereUniqueWithoutProductsInput {
  where: AttributeWhereUniqueInput!
  update: AttributeUpdateWithoutProductsDataInput!
  create: AttributeCreateWithoutProductsInput!
}

input AttributeWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  category: CategoryWhereInput
  shop: ShopWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input AttributeWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Brand implements Node {
  id: ID!
  name: String!
  category(where: CategoryWhereInput): Category!
  shop(where: ShopWhereInput): Shop!
}

"""A connection to a list of items."""
type BrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  name: String!
  category: CategoryCreateOneInput!
  shop: ShopCreateOneInput!
}

input BrandCreateOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

"""An edge in a connection."""
type BrandEdge {
  """The item at the end of the edge."""
  node: Brand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BrandPreviousValues {
  id: ID!
  name: String!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
}

input BrandUpdateDataInput {
  name: String
  category: CategoryUpdateOneInput
  shop: ShopUpdateOneInput
}

input BrandUpdateInput {
  name: String
  category: CategoryUpdateOneInput
  shop: ShopUpdateOneInput
}

input BrandUpdateOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  delete: Boolean
  update: BrandUpdateDataInput
  upsert: BrandUpsertNestedInput
}

input BrandUpsertNestedInput {
  update: BrandUpdateDataInput!
  create: BrandCreateInput!
}

input BrandWhereInput {
  """Logical AND on all given filters."""
  AND: [BrandWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrandWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  category: CategoryWhereInput
  shop: ShopWhereInput
}

input BrandWhereUniqueInput {
  id: ID
}

type Category implements Node {
  id: ID!
  name: String!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
  shop(where: ShopWhereInput): Shop!
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  name: String!
  options: OptionCreateManyWithoutCategoryInput
  shop: ShopCreateOneInput!
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutOptionsInput {
  create: CategoryCreateWithoutOptionsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutOptionsInput {
  name: String!
  shop: ShopCreateOneInput!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateDataInput {
  name: String
  options: OptionUpdateManyWithoutCategoryInput
  shop: ShopUpdateOneInput
}

input CategoryUpdateInput {
  name: String
  options: OptionUpdateManyWithoutCategoryInput
  shop: ShopUpdateOneInput
}

input CategoryUpdateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  delete: Boolean
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
}

input CategoryUpdateOneWithoutOptionsInput {
  create: CategoryCreateWithoutOptionsInput
  connect: CategoryWhereUniqueInput
  delete: Boolean
  update: CategoryUpdateWithoutOptionsDataInput
  upsert: CategoryUpsertWithoutOptionsInput
}

input CategoryUpdateWithoutOptionsDataInput {
  name: String
  shop: ShopUpdateOneInput
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryUpsertWithoutOptionsInput {
  update: CategoryUpdateWithoutOptionsDataInput!
  create: CategoryCreateWithoutOptionsInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
  shop: ShopWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

scalar DateTime

type File implements Node {
  id: ID!
  name: String!
  url: String!
  contentType: String!
  secret: String!
  size: Int!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  name: String!
  url: String!
  contentType: String!
  secret: String!
  size: Int!
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  contentType_ASC
  contentType_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FilePreviousValues {
  id: ID!
  name: String!
  url: String!
  contentType: String!
  secret: String!
  size: Int!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  name: String
  url: String
  contentType: String
  secret: String
  size: Int
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  contentType: String

  """All values that are not equal to given value."""
  contentType_not: String

  """All values that are contained in given list."""
  contentType_in: [String!]

  """All values that are not contained in given list."""
  contentType_not_in: [String!]

  """All values less than the given value."""
  contentType_lt: String

  """All values less than or equal the given value."""
  contentType_lte: String

  """All values greater than the given value."""
  contentType_gt: String

  """All values greater than or equal the given value."""
  contentType_gte: String

  """All values containing the given string."""
  contentType_contains: String

  """All values not containing the given string."""
  contentType_not_contains: String

  """All values starting with the given string."""
  contentType_starts_with: String

  """All values not starting with the given string."""
  contentType_not_starts_with: String

  """All values ending with the given string."""
  contentType_ends_with: String

  """All values not ending with the given string."""
  contentType_not_ends_with: String
  secret: String

  """All values that are not equal to given value."""
  secret_not: String

  """All values that are contained in given list."""
  secret_in: [String!]

  """All values that are not contained in given list."""
  secret_not_in: [String!]

  """All values less than the given value."""
  secret_lt: String

  """All values less than or equal the given value."""
  secret_lte: String

  """All values greater than the given value."""
  secret_gt: String

  """All values greater than or equal the given value."""
  secret_gte: String

  """All values containing the given string."""
  secret_contains: String

  """All values not containing the given string."""
  secret_not_contains: String

  """All values starting with the given string."""
  secret_starts_with: String

  """All values not starting with the given string."""
  secret_not_starts_with: String

  """All values ending with the given string."""
  secret_ends_with: String

  """All values not ending with the given string."""
  secret_not_ends_with: String
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
}

input FileWhereUniqueInput {
  id: ID
  url: String
  secret: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBrand(data: BrandCreateInput!): Brand!
  createCategory(data: CategoryCreateInput!): Category!
  createAttribute(data: AttributeCreateInput!): Attribute!
  createOption(data: OptionCreateInput!): Option!
  createOptionValue(data: OptionValueCreateInput!): OptionValue!
  createSelectedOption(data: SelectedOptionCreateInput!): SelectedOption!
  createVariant(data: VariantCreateInput!): Variant!
  createProduct(data: ProductCreateInput!): Product!
  createUser(data: UserCreateInput!): User!
  createFile(data: FileCreateInput!): File!
  createOrder(data: OrderCreateInput!): Order!
  createOrderLineItem(data: OrderLineItemCreateInput!): OrderLineItem!
  createShop(data: ShopCreateInput!): Shop!
  createOrderableProduct(data: OrderableProductCreateInput!): OrderableProduct!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateAttribute(data: AttributeUpdateInput!, where: AttributeWhereUniqueInput!): Attribute
  updateOption(data: OptionUpdateInput!, where: OptionWhereUniqueInput!): Option
  updateOptionValue(data: OptionValueUpdateInput!, where: OptionValueWhereUniqueInput!): OptionValue
  updateSelectedOption(data: SelectedOptionUpdateInput!, where: SelectedOptionWhereUniqueInput!): SelectedOption
  updateVariant(data: VariantUpdateInput!, where: VariantWhereUniqueInput!): Variant
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOrderLineItem(data: OrderLineItemUpdateInput!, where: OrderLineItemWhereUniqueInput!): OrderLineItem
  updateShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateOrderableProduct(data: OrderableProductUpdateInput!, where: OrderableProductWhereUniqueInput!): OrderableProduct
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteOptionValue(where: OptionValueWhereUniqueInput!): OptionValue
  deleteSelectedOption(where: SelectedOptionWhereUniqueInput!): SelectedOption
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFile(where: FileWhereUniqueInput!): File
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrderLineItem(where: OrderLineItemWhereUniqueInput!): OrderLineItem
  deleteShop(where: ShopWhereUniqueInput!): Shop
  deleteOrderableProduct(where: OrderableProductWhereUniqueInput!): OrderableProduct
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertAttribute(where: AttributeWhereUniqueInput!, create: AttributeCreateInput!, update: AttributeUpdateInput!): Attribute!
  upsertOption(where: OptionWhereUniqueInput!, create: OptionCreateInput!, update: OptionUpdateInput!): Option!
  upsertOptionValue(where: OptionValueWhereUniqueInput!, create: OptionValueCreateInput!, update: OptionValueUpdateInput!): OptionValue!
  upsertSelectedOption(where: SelectedOptionWhereUniqueInput!, create: SelectedOptionCreateInput!, update: SelectedOptionUpdateInput!): SelectedOption!
  upsertVariant(where: VariantWhereUniqueInput!, create: VariantCreateInput!, update: VariantUpdateInput!): Variant!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertOrderLineItem(where: OrderLineItemWhereUniqueInput!, create: OrderLineItemCreateInput!, update: OrderLineItemUpdateInput!): OrderLineItem!
  upsertShop(where: ShopWhereUniqueInput!, create: ShopCreateInput!, update: ShopUpdateInput!): Shop!
  upsertOrderableProduct(where: OrderableProductWhereUniqueInput!, create: OrderableProductCreateInput!, update: OrderableProductUpdateInput!): OrderableProduct!
  updateManyBrands(data: BrandUpdateInput!, where: BrandWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateInput!, where: CategoryWhereInput): BatchPayload!
  updateManyAttributes(data: AttributeUpdateInput!, where: AttributeWhereInput): BatchPayload!
  updateManyOptions(data: OptionUpdateInput!, where: OptionWhereInput): BatchPayload!
  updateManyOptionValues(data: OptionValueUpdateInput!, where: OptionValueWhereInput): BatchPayload!
  updateManySelectedOptions(data: SelectedOptionUpdateInput!, where: SelectedOptionWhereInput): BatchPayload!
  updateManyVariants(data: VariantUpdateInput!, where: VariantWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateInput!, where: ProductWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateInput!, where: OrderWhereInput): BatchPayload!
  updateManyOrderLineItems(data: OrderLineItemUpdateInput!, where: OrderLineItemWhereInput): BatchPayload!
  updateManyShops(data: ShopUpdateInput!, where: ShopWhereInput): BatchPayload!
  updateManyOrderableProducts(data: OrderableProductUpdateInput!, where: OrderableProductWhereInput): BatchPayload!
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyAttributes(where: AttributeWhereInput): BatchPayload!
  deleteManyOptions(where: OptionWhereInput): BatchPayload!
  deleteManyOptionValues(where: OptionValueWhereInput): BatchPayload!
  deleteManySelectedOptions(where: SelectedOptionWhereInput): BatchPayload!
  deleteManyVariants(where: VariantWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyOrderLineItems(where: OrderLineItemWhereInput): BatchPayload!
  deleteManyShops(where: ShopWhereInput): BatchPayload!
  deleteManyOrderableProducts(where: OrderableProductWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Option implements Node {
  id: ID!
  name: String!
  values(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionValue!]
  category(where: CategoryWhereInput): Category!
  shop(where: ShopWhereInput): Shop!
}

"""A connection to a list of items."""
type OptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OptionEdge]!
  aggregate: AggregateOption!
}

input OptionCreateInput {
  name: String!
  values: OptionValueCreateManyInput
  category: CategoryCreateOneWithoutOptionsInput!
  shop: ShopCreateOneInput!
}

input OptionCreateManyInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateManyWithoutCategoryInput {
  create: [OptionCreateWithoutCategoryInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateOneInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
}

input OptionCreateWithoutCategoryInput {
  name: String!
  values: OptionValueCreateManyInput
  shop: ShopCreateOneInput!
}

"""An edge in a connection."""
type OptionEdge {
  """The item at the end of the edge."""
  node: Option!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OptionPreviousValues {
  id: ID!
  name: String!
}

type OptionSubscriptionPayload {
  mutation: MutationType!
  node: Option
  updatedFields: [String!]
  previousValues: OptionPreviousValues
}

input OptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OptionWhereInput
}

input OptionUpdateDataInput {
  name: String
  values: OptionValueUpdateManyInput
  category: CategoryUpdateOneWithoutOptionsInput
  shop: ShopUpdateOneInput
}

input OptionUpdateInput {
  name: String
  values: OptionValueUpdateManyInput
  category: CategoryUpdateOneWithoutOptionsInput
  shop: ShopUpdateOneInput
}

input OptionUpdateManyInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  delete: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueNestedInput!]
  upsert: [OptionUpsertWithWhereUniqueNestedInput!]
}

input OptionUpdateManyWithoutCategoryInput {
  create: [OptionCreateWithoutCategoryInput!]
  connect: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  delete: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [OptionUpsertWithWhereUniqueWithoutCategoryInput!]
}

input OptionUpdateOneInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
  delete: Boolean
  update: OptionUpdateDataInput
  upsert: OptionUpsertNestedInput
}

input OptionUpdateWithoutCategoryDataInput {
  name: String
  values: OptionValueUpdateManyInput
  shop: ShopUpdateOneInput
}

input OptionUpdateWithWhereUniqueNestedInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateDataInput!
}

input OptionUpdateWithWhereUniqueWithoutCategoryInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateWithoutCategoryDataInput!
}

input OptionUpsertNestedInput {
  update: OptionUpdateDataInput!
  create: OptionCreateInput!
}

input OptionUpsertWithWhereUniqueNestedInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateDataInput!
  create: OptionCreateInput!
}

input OptionUpsertWithWhereUniqueWithoutCategoryInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateWithoutCategoryDataInput!
  create: OptionCreateWithoutCategoryInput!
}

type OptionValue implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type OptionValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OptionValueEdge]!
  aggregate: AggregateOptionValue!
}

input OptionValueCreateInput {
  name: String!
}

input OptionValueCreateManyInput {
  create: [OptionValueCreateInput!]
  connect: [OptionValueWhereUniqueInput!]
}

input OptionValueCreateOneInput {
  create: OptionValueCreateInput
  connect: OptionValueWhereUniqueInput
}

"""An edge in a connection."""
type OptionValueEdge {
  """The item at the end of the edge."""
  node: OptionValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OptionValueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OptionValuePreviousValues {
  id: ID!
  name: String!
}

type OptionValueSubscriptionPayload {
  mutation: MutationType!
  node: OptionValue
  updatedFields: [String!]
  previousValues: OptionValuePreviousValues
}

input OptionValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionValueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OptionValueWhereInput
}

input OptionValueUpdateDataInput {
  name: String
}

input OptionValueUpdateInput {
  name: String
}

input OptionValueUpdateManyInput {
  create: [OptionValueCreateInput!]
  connect: [OptionValueWhereUniqueInput!]
  disconnect: [OptionValueWhereUniqueInput!]
  delete: [OptionValueWhereUniqueInput!]
  update: [OptionValueUpdateWithWhereUniqueNestedInput!]
  upsert: [OptionValueUpsertWithWhereUniqueNestedInput!]
}

input OptionValueUpdateOneInput {
  create: OptionValueCreateInput
  connect: OptionValueWhereUniqueInput
  delete: Boolean
  update: OptionValueUpdateDataInput
  upsert: OptionValueUpsertNestedInput
}

input OptionValueUpdateWithWhereUniqueNestedInput {
  where: OptionValueWhereUniqueInput!
  data: OptionValueUpdateDataInput!
}

input OptionValueUpsertNestedInput {
  update: OptionValueUpdateDataInput!
  create: OptionValueCreateInput!
}

input OptionValueUpsertWithWhereUniqueNestedInput {
  where: OptionValueWhereUniqueInput!
  update: OptionValueUpdateDataInput!
  create: OptionValueCreateInput!
}

input OptionValueWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input OptionValueWhereUniqueInput {
  id: ID
}

input OptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  values_every: OptionValueWhereInput
  values_some: OptionValueWhereInput
  values_none: OptionValueWhereInput
  category: CategoryWhereInput
  shop: ShopWhereInput
}

input OptionWhereUniqueInput {
  id: ID
}

type Order implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner(where: UserWhereInput): User!
  receiver(where: ShopWhereInput): Shop!
  lineItems(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem!]
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
}

type OrderableProduct implements Node {
  id: ID!
  product(where: ProductWhereInput): Product!
  position: Int!
  shopBestSeller(where: ShopWhereInput): Shop
  shopNewProduct(where: ShopWhereInput): Shop
}

"""A connection to a list of items."""
type OrderableProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderableProductEdge]!
  aggregate: AggregateOrderableProduct!
}

input OrderableProductCreateInput {
  position: Int!
  product: ProductCreateOneWithoutOrderablesInput!
  shopBestSeller: ShopCreateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopCreateOneWithoutNewProductsInput
}

input OrderableProductCreateManyWithoutProductInput {
  create: [OrderableProductCreateWithoutProductInput!]
  connect: [OrderableProductWhereUniqueInput!]
}

input OrderableProductCreateManyWithoutShopBestSellerInput {
  create: [OrderableProductCreateWithoutShopBestSellerInput!]
  connect: [OrderableProductWhereUniqueInput!]
}

input OrderableProductCreateManyWithoutShopNewProductInput {
  create: [OrderableProductCreateWithoutShopNewProductInput!]
  connect: [OrderableProductWhereUniqueInput!]
}

input OrderableProductCreateWithoutProductInput {
  position: Int!
  shopBestSeller: ShopCreateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopCreateOneWithoutNewProductsInput
}

input OrderableProductCreateWithoutShopBestSellerInput {
  position: Int!
  product: ProductCreateOneWithoutOrderablesInput!
  shopNewProduct: ShopCreateOneWithoutNewProductsInput
}

input OrderableProductCreateWithoutShopNewProductInput {
  position: Int!
  product: ProductCreateOneWithoutOrderablesInput!
  shopBestSeller: ShopCreateOneWithoutBestSellerProductsInput
}

"""An edge in a connection."""
type OrderableProductEdge {
  """The item at the end of the edge."""
  node: OrderableProduct!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderableProductOrderByInput {
  id_ASC
  id_DESC
  position_ASC
  position_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderableProductPreviousValues {
  id: ID!
  position: Int!
}

type OrderableProductSubscriptionPayload {
  mutation: MutationType!
  node: OrderableProduct
  updatedFields: [String!]
  previousValues: OrderableProductPreviousValues
}

input OrderableProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderableProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderableProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderableProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderableProductWhereInput
}

input OrderableProductUpdateInput {
  position: Int
  product: ProductUpdateOneWithoutOrderablesInput
  shopBestSeller: ShopUpdateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopUpdateOneWithoutNewProductsInput
}

input OrderableProductUpdateManyWithoutProductInput {
  create: [OrderableProductCreateWithoutProductInput!]
  connect: [OrderableProductWhereUniqueInput!]
  disconnect: [OrderableProductWhereUniqueInput!]
  delete: [OrderableProductWhereUniqueInput!]
  update: [OrderableProductUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [OrderableProductUpsertWithWhereUniqueWithoutProductInput!]
}

input OrderableProductUpdateManyWithoutShopBestSellerInput {
  create: [OrderableProductCreateWithoutShopBestSellerInput!]
  connect: [OrderableProductWhereUniqueInput!]
  disconnect: [OrderableProductWhereUniqueInput!]
  delete: [OrderableProductWhereUniqueInput!]
  update: [OrderableProductUpdateWithWhereUniqueWithoutShopBestSellerInput!]
  upsert: [OrderableProductUpsertWithWhereUniqueWithoutShopBestSellerInput!]
}

input OrderableProductUpdateManyWithoutShopNewProductInput {
  create: [OrderableProductCreateWithoutShopNewProductInput!]
  connect: [OrderableProductWhereUniqueInput!]
  disconnect: [OrderableProductWhereUniqueInput!]
  delete: [OrderableProductWhereUniqueInput!]
  update: [OrderableProductUpdateWithWhereUniqueWithoutShopNewProductInput!]
  upsert: [OrderableProductUpsertWithWhereUniqueWithoutShopNewProductInput!]
}

input OrderableProductUpdateWithoutProductDataInput {
  position: Int
  shopBestSeller: ShopUpdateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopUpdateOneWithoutNewProductsInput
}

input OrderableProductUpdateWithoutShopBestSellerDataInput {
  position: Int
  product: ProductUpdateOneWithoutOrderablesInput
  shopNewProduct: ShopUpdateOneWithoutNewProductsInput
}

input OrderableProductUpdateWithoutShopNewProductDataInput {
  position: Int
  product: ProductUpdateOneWithoutOrderablesInput
  shopBestSeller: ShopUpdateOneWithoutBestSellerProductsInput
}

input OrderableProductUpdateWithWhereUniqueWithoutProductInput {
  where: OrderableProductWhereUniqueInput!
  data: OrderableProductUpdateWithoutProductDataInput!
}

input OrderableProductUpdateWithWhereUniqueWithoutShopBestSellerInput {
  where: OrderableProductWhereUniqueInput!
  data: OrderableProductUpdateWithoutShopBestSellerDataInput!
}

input OrderableProductUpdateWithWhereUniqueWithoutShopNewProductInput {
  where: OrderableProductWhereUniqueInput!
  data: OrderableProductUpdateWithoutShopNewProductDataInput!
}

input OrderableProductUpsertWithWhereUniqueWithoutProductInput {
  where: OrderableProductWhereUniqueInput!
  update: OrderableProductUpdateWithoutProductDataInput!
  create: OrderableProductCreateWithoutProductInput!
}

input OrderableProductUpsertWithWhereUniqueWithoutShopBestSellerInput {
  where: OrderableProductWhereUniqueInput!
  update: OrderableProductUpdateWithoutShopBestSellerDataInput!
  create: OrderableProductCreateWithoutShopBestSellerInput!
}

input OrderableProductUpsertWithWhereUniqueWithoutShopNewProductInput {
  where: OrderableProductWhereUniqueInput!
  update: OrderableProductUpdateWithoutShopNewProductDataInput!
  create: OrderableProductCreateWithoutShopNewProductInput!
}

input OrderableProductWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderableProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderableProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderableProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  position: Int

  """All values that are not equal to given value."""
  position_not: Int

  """All values that are contained in given list."""
  position_in: [Int!]

  """All values that are not contained in given list."""
  position_not_in: [Int!]

  """All values less than the given value."""
  position_lt: Int

  """All values less than or equal the given value."""
  position_lte: Int

  """All values greater than the given value."""
  position_gt: Int

  """All values greater than or equal the given value."""
  position_gte: Int
  product: ProductWhereInput
  shopBestSeller: ShopWhereInput
  shopNewProduct: ShopWhereInput
}

input OrderableProductWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
  owner: UserCreateOneWithoutOrdersInput!
  receiver: ShopCreateOneInput!
  lineItems: OrderLineItemCreateManyInput
}

input OrderCreateManyWithoutOwnerInput {
  create: [OrderCreateWithoutOwnerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutOwnerInput {
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
  receiver: ShopCreateOneInput!
  lineItems: OrderLineItemCreateManyInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

type OrderLineItem implements Node {
  id: ID!
  deletedAt: DateTime
  quantity: Int!
  variant(where: VariantWhereInput): Variant
  owner(where: UserWhereInput): User
  shop(where: ShopWhereInput): Shop!
}

"""A connection to a list of items."""
type OrderLineItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderLineItemEdge]!
  aggregate: AggregateOrderLineItem!
}

input OrderLineItemCreateInput {
  deletedAt: DateTime
  quantity: Int!
  variant: VariantCreateOneInput
  owner: UserCreateOneWithoutCartInput
  shop: ShopCreateOneInput!
}

input OrderLineItemCreateManyInput {
  create: [OrderLineItemCreateInput!]
  connect: [OrderLineItemWhereUniqueInput!]
}

input OrderLineItemCreateManyWithoutOwnerInput {
  create: [OrderLineItemCreateWithoutOwnerInput!]
  connect: [OrderLineItemWhereUniqueInput!]
}

input OrderLineItemCreateWithoutOwnerInput {
  deletedAt: DateTime
  quantity: Int!
  variant: VariantCreateOneInput
  shop: ShopCreateOneInput!
}

"""An edge in a connection."""
type OrderLineItemEdge {
  """The item at the end of the edge."""
  node: OrderLineItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderLineItemOrderByInput {
  id_ASC
  id_DESC
  deletedAt_ASC
  deletedAt_DESC
  quantity_ASC
  quantity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderLineItemPreviousValues {
  id: ID!
  deletedAt: DateTime
  quantity: Int!
}

type OrderLineItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderLineItem
  updatedFields: [String!]
  previousValues: OrderLineItemPreviousValues
}

input OrderLineItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderLineItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderLineItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderLineItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderLineItemWhereInput
}

input OrderLineItemUpdateDataInput {
  deletedAt: DateTime
  quantity: Int
  variant: VariantUpdateOneInput
  owner: UserUpdateOneWithoutCartInput
  shop: ShopUpdateOneInput
}

input OrderLineItemUpdateInput {
  deletedAt: DateTime
  quantity: Int
  variant: VariantUpdateOneInput
  owner: UserUpdateOneWithoutCartInput
  shop: ShopUpdateOneInput
}

input OrderLineItemUpdateManyInput {
  create: [OrderLineItemCreateInput!]
  connect: [OrderLineItemWhereUniqueInput!]
  disconnect: [OrderLineItemWhereUniqueInput!]
  delete: [OrderLineItemWhereUniqueInput!]
  update: [OrderLineItemUpdateWithWhereUniqueNestedInput!]
  upsert: [OrderLineItemUpsertWithWhereUniqueNestedInput!]
}

input OrderLineItemUpdateManyWithoutOwnerInput {
  create: [OrderLineItemCreateWithoutOwnerInput!]
  connect: [OrderLineItemWhereUniqueInput!]
  disconnect: [OrderLineItemWhereUniqueInput!]
  delete: [OrderLineItemWhereUniqueInput!]
  update: [OrderLineItemUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [OrderLineItemUpsertWithWhereUniqueWithoutOwnerInput!]
}

input OrderLineItemUpdateWithoutOwnerDataInput {
  deletedAt: DateTime
  quantity: Int
  variant: VariantUpdateOneInput
  shop: ShopUpdateOneInput
}

input OrderLineItemUpdateWithWhereUniqueNestedInput {
  where: OrderLineItemWhereUniqueInput!
  data: OrderLineItemUpdateDataInput!
}

input OrderLineItemUpdateWithWhereUniqueWithoutOwnerInput {
  where: OrderLineItemWhereUniqueInput!
  data: OrderLineItemUpdateWithoutOwnerDataInput!
}

input OrderLineItemUpsertWithWhereUniqueNestedInput {
  where: OrderLineItemWhereUniqueInput!
  update: OrderLineItemUpdateDataInput!
  create: OrderLineItemCreateInput!
}

input OrderLineItemUpsertWithWhereUniqueWithoutOwnerInput {
  where: OrderLineItemWhereUniqueInput!
  update: OrderLineItemUpdateWithoutOwnerDataInput!
  create: OrderLineItemCreateWithoutOwnerInput!
}

input OrderLineItemWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderLineItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderLineItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderLineItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  variant: VariantWhereInput
  owner: UserWhereInput
  shop: ShopWhereInput
}

input OrderLineItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  totalPrice_ASC
  totalPrice_DESC
  totalRefunded_ASC
  totalRefunded_DESC
  totalTax_ASC
  totalTax_DESC
  orderStatus_ASC
  orderStatus_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
}

enum OrderStatus {
  SUBMITTED
  PAID
  PREPARED
  FAILED
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
  orderStatus: OrderStatus
  owner: UserUpdateOneWithoutOrdersInput
  receiver: ShopUpdateOneInput
  lineItems: OrderLineItemUpdateManyInput
}

input OrderUpdateManyWithoutOwnerInput {
  create: [OrderCreateWithoutOwnerInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutOwnerInput!]
}

input OrderUpdateWithoutOwnerDataInput {
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
  orderStatus: OrderStatus
  receiver: ShopUpdateOneInput
  lineItems: OrderLineItemUpdateManyInput
}

input OrderUpdateWithWhereUniqueWithoutOwnerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutOwnerDataInput!
}

input OrderUpsertWithWhereUniqueWithoutOwnerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutOwnerDataInput!
  create: OrderCreateWithoutOwnerInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  totalPrice: Float

  """All values that are not equal to given value."""
  totalPrice_not: Float

  """All values that are contained in given list."""
  totalPrice_in: [Float!]

  """All values that are not contained in given list."""
  totalPrice_not_in: [Float!]

  """All values less than the given value."""
  totalPrice_lt: Float

  """All values less than or equal the given value."""
  totalPrice_lte: Float

  """All values greater than the given value."""
  totalPrice_gt: Float

  """All values greater than or equal the given value."""
  totalPrice_gte: Float
  totalRefunded: Float

  """All values that are not equal to given value."""
  totalRefunded_not: Float

  """All values that are contained in given list."""
  totalRefunded_in: [Float!]

  """All values that are not contained in given list."""
  totalRefunded_not_in: [Float!]

  """All values less than the given value."""
  totalRefunded_lt: Float

  """All values less than or equal the given value."""
  totalRefunded_lte: Float

  """All values greater than the given value."""
  totalRefunded_gt: Float

  """All values greater than or equal the given value."""
  totalRefunded_gte: Float
  totalTax: Float

  """All values that are not equal to given value."""
  totalTax_not: Float

  """All values that are contained in given list."""
  totalTax_in: [Float!]

  """All values that are not contained in given list."""
  totalTax_not_in: [Float!]

  """All values less than the given value."""
  totalTax_lt: Float

  """All values less than or equal the given value."""
  totalTax_lte: Float

  """All values greater than the given value."""
  totalTax_gt: Float

  """All values greater than or equal the given value."""
  totalTax_gte: Float
  orderStatus: OrderStatus

  """All values that are not equal to given value."""
  orderStatus_not: OrderStatus

  """All values that are contained in given list."""
  orderStatus_in: [OrderStatus!]

  """All values that are not contained in given list."""
  orderStatus_not_in: [OrderStatus!]
  owner: UserWhereInput
  receiver: ShopWhereInput
  lineItems_every: OrderLineItemWhereInput
  lineItems_some: OrderLineItemWhereInput
  lineItems_none: OrderLineItemWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Product implements Node {
  id: ID!
  deletedAt: DateTime
  shop(where: ShopWhereInput): Shop!
  name: String!
  description: String
  brand(where: BrandWhereInput): Brand!
  SKU: String
  category(where: CategoryWhereInput): Category!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
  unavailableOptionsValues(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionValue!]
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant!]
  attributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute!]
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  orderables(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct!]
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  deletedAt: DateTime
  name: String!
  description: String
  SKU: String
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  shop: ShopCreateOneWithoutProductsInput!
  brand: BrandCreateOneInput!
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  attributes: AttributeCreateManyWithoutProductsInput
  orderables: OrderableProductCreateManyWithoutProductInput
}

input ProductCreateManyWithoutAttributesInput {
  create: [ProductCreateWithoutAttributesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutOrderablesInput {
  create: ProductCreateWithoutOrderablesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutAttributesInput {
  deletedAt: DateTime
  name: String!
  description: String
  SKU: String
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  shop: ShopCreateOneWithoutProductsInput!
  brand: BrandCreateOneInput!
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  orderables: OrderableProductCreateManyWithoutProductInput
}

input ProductCreateWithoutOrderablesInput {
  deletedAt: DateTime
  name: String!
  description: String
  SKU: String
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  shop: ShopCreateOneWithoutProductsInput!
  brand: BrandCreateOneInput!
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  attributes: AttributeCreateManyWithoutProductsInput
}

input ProductCreateWithoutShopInput {
  deletedAt: DateTime
  name: String!
  description: String
  SKU: String
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  brand: BrandCreateOneInput!
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  attributes: AttributeCreateManyWithoutProductsInput
  orderables: OrderableProductCreateManyWithoutProductInput
}

input ProductCreateWithoutVariantsInput {
  deletedAt: DateTime
  name: String!
  description: String
  SKU: String
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  shop: ShopCreateOneWithoutProductsInput!
  brand: BrandCreateOneInput!
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  attributes: AttributeCreateManyWithoutProductsInput
  orderables: OrderableProductCreateManyWithoutProductInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  SKU_ASC
  SKU_DESC
  displayPrice_ASC
  displayPrice_DESC
  available_ASC
  available_DESC
  imageUrl_ASC
  imageUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductPreviousValues {
  id: ID!
  deletedAt: DateTime
  name: String!
  description: String
  SKU: String
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  deletedAt: DateTime
  name: String
  description: String
  SKU: String
  displayPrice: Float
  available: Boolean
  imageUrl: String
  shop: ShopUpdateOneWithoutProductsInput
  brand: BrandUpdateOneInput
  category: CategoryUpdateOneInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  attributes: AttributeUpdateManyWithoutProductsInput
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateManyWithoutAttributesInput {
  create: [ProductCreateWithoutAttributesInput!]
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutAttributesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutAttributesInput!]
}

input ProductUpdateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  connect: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutShopInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutShopInput!]
}

input ProductUpdateOneWithoutOrderablesInput {
  create: ProductCreateWithoutOrderablesInput
  connect: ProductWhereUniqueInput
  delete: Boolean
  update: ProductUpdateWithoutOrderablesDataInput
  upsert: ProductUpsertWithoutOrderablesInput
}

input ProductUpdateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutVariantsDataInput
  upsert: ProductUpsertWithoutVariantsInput
}

input ProductUpdateWithoutAttributesDataInput {
  deletedAt: DateTime
  name: String
  description: String
  SKU: String
  displayPrice: Float
  available: Boolean
  imageUrl: String
  shop: ShopUpdateOneWithoutProductsInput
  brand: BrandUpdateOneInput
  category: CategoryUpdateOneInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateWithoutOrderablesDataInput {
  deletedAt: DateTime
  name: String
  description: String
  SKU: String
  displayPrice: Float
  available: Boolean
  imageUrl: String
  shop: ShopUpdateOneWithoutProductsInput
  brand: BrandUpdateOneInput
  category: CategoryUpdateOneInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  attributes: AttributeUpdateManyWithoutProductsInput
}

input ProductUpdateWithoutShopDataInput {
  deletedAt: DateTime
  name: String
  description: String
  SKU: String
  displayPrice: Float
  available: Boolean
  imageUrl: String
  brand: BrandUpdateOneInput
  category: CategoryUpdateOneInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  attributes: AttributeUpdateManyWithoutProductsInput
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateWithoutVariantsDataInput {
  deletedAt: DateTime
  name: String
  description: String
  SKU: String
  displayPrice: Float
  available: Boolean
  imageUrl: String
  shop: ShopUpdateOneWithoutProductsInput
  brand: BrandUpdateOneInput
  category: CategoryUpdateOneInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  attributes: AttributeUpdateManyWithoutProductsInput
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueWithoutAttributesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutAttributesDataInput!
}

input ProductUpdateWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutShopDataInput!
}

input ProductUpsertWithoutOrderablesInput {
  update: ProductUpdateWithoutOrderablesDataInput!
  create: ProductCreateWithoutOrderablesInput!
}

input ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput!
  create: ProductCreateWithoutVariantsInput!
}

input ProductUpsertWithWhereUniqueWithoutAttributesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutAttributesDataInput!
  create: ProductCreateWithoutAttributesInput!
}

input ProductUpsertWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutShopDataInput!
  create: ProductCreateWithoutShopInput!
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  SKU: String

  """All values that are not equal to given value."""
  SKU_not: String

  """All values that are contained in given list."""
  SKU_in: [String!]

  """All values that are not contained in given list."""
  SKU_not_in: [String!]

  """All values less than the given value."""
  SKU_lt: String

  """All values less than or equal the given value."""
  SKU_lte: String

  """All values greater than the given value."""
  SKU_gt: String

  """All values greater than or equal the given value."""
  SKU_gte: String

  """All values containing the given string."""
  SKU_contains: String

  """All values not containing the given string."""
  SKU_not_contains: String

  """All values starting with the given string."""
  SKU_starts_with: String

  """All values not starting with the given string."""
  SKU_not_starts_with: String

  """All values ending with the given string."""
  SKU_ends_with: String

  """All values not ending with the given string."""
  SKU_not_ends_with: String
  displayPrice: Float

  """All values that are not equal to given value."""
  displayPrice_not: Float

  """All values that are contained in given list."""
  displayPrice_in: [Float!]

  """All values that are not contained in given list."""
  displayPrice_not_in: [Float!]

  """All values less than the given value."""
  displayPrice_lt: Float

  """All values less than or equal the given value."""
  displayPrice_lte: Float

  """All values greater than the given value."""
  displayPrice_gt: Float

  """All values greater than or equal the given value."""
  displayPrice_gte: Float
  available: Boolean

  """All values that are not equal to given value."""
  available_not: Boolean
  imageUrl: String

  """All values that are not equal to given value."""
  imageUrl_not: String

  """All values that are contained in given list."""
  imageUrl_in: [String!]

  """All values that are not contained in given list."""
  imageUrl_not_in: [String!]

  """All values less than the given value."""
  imageUrl_lt: String

  """All values less than or equal the given value."""
  imageUrl_lte: String

  """All values greater than the given value."""
  imageUrl_gt: String

  """All values greater than or equal the given value."""
  imageUrl_gte: String

  """All values containing the given string."""
  imageUrl_contains: String

  """All values not containing the given string."""
  imageUrl_not_contains: String

  """All values starting with the given string."""
  imageUrl_starts_with: String

  """All values not starting with the given string."""
  imageUrl_not_starts_with: String

  """All values ending with the given string."""
  imageUrl_ends_with: String

  """All values not ending with the given string."""
  imageUrl_not_ends_with: String
  shop: ShopWhereInput
  brand: BrandWhereInput
  category: CategoryWhereInput
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
  unavailableOptionsValues_every: OptionValueWhereInput
  unavailableOptionsValues_some: OptionValueWhereInput
  unavailableOptionsValues_none: OptionValueWhereInput
  variants_every: VariantWhereInput
  variants_some: VariantWhereInput
  variants_none: VariantWhereInput
  attributes_every: AttributeWhereInput
  attributes_some: AttributeWhereInput
  attributes_none: AttributeWhereInput
  orderables_every: OrderableProductWhereInput
  orderables_some: OrderableProductWhereInput
  orderables_none: OrderableProductWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  attributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute]!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option]!
  optionValues(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionValue]!
  selectedOptions(where: SelectedOptionWhereInput, orderBy: SelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SelectedOption]!
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  orderLineItems(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem]!
  shops(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shop]!
  orderableProducts(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct]!
  brand(where: BrandWhereUniqueInput!): Brand
  category(where: CategoryWhereUniqueInput!): Category
  attribute(where: AttributeWhereUniqueInput!): Attribute
  option(where: OptionWhereUniqueInput!): Option
  optionValue(where: OptionValueWhereUniqueInput!): OptionValue
  selectedOption(where: SelectedOptionWhereUniqueInput!): SelectedOption
  variant(where: VariantWhereUniqueInput!): Variant
  product(where: ProductWhereUniqueInput!): Product
  user(where: UserWhereUniqueInput!): User
  file(where: FileWhereUniqueInput!): File
  order(where: OrderWhereUniqueInput!): Order
  orderLineItem(where: OrderLineItemWhereUniqueInput!): OrderLineItem
  shop(where: ShopWhereUniqueInput!): Shop
  orderableProduct(where: OrderableProductWhereUniqueInput!): OrderableProduct
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  attributesConnection(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeConnection!
  optionsConnection(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  optionValuesConnection(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionValueConnection!
  selectedOptionsConnection(where: SelectedOptionWhereInput, orderBy: SelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SelectedOptionConnection!
  variantsConnection(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VariantConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderLineItemsConnection(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderLineItemConnection!
  shopsConnection(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopConnection!
  orderableProductsConnection(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderableProductConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  USER
  ADMIN
}

type SelectedOption implements Node {
  id: ID!
  deletedAt: DateTime
  option(where: OptionWhereInput): Option!
  variant(where: VariantWhereInput): Variant!
  value(where: OptionValueWhereInput): OptionValue!
}

"""A connection to a list of items."""
type SelectedOptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SelectedOptionEdge]!
  aggregate: AggregateSelectedOption!
}

input SelectedOptionCreateInput {
  deletedAt: DateTime
  option: OptionCreateOneInput!
  variant: VariantCreateOneWithoutSelectedOptionsInput!
  value: OptionValueCreateOneInput!
}

input SelectedOptionCreateManyWithoutVariantInput {
  create: [SelectedOptionCreateWithoutVariantInput!]
  connect: [SelectedOptionWhereUniqueInput!]
}

input SelectedOptionCreateWithoutVariantInput {
  deletedAt: DateTime
  option: OptionCreateOneInput!
  value: OptionValueCreateOneInput!
}

"""An edge in a connection."""
type SelectedOptionEdge {
  """The item at the end of the edge."""
  node: SelectedOption!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SelectedOptionOrderByInput {
  id_ASC
  id_DESC
  deletedAt_ASC
  deletedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SelectedOptionPreviousValues {
  id: ID!
  deletedAt: DateTime
}

type SelectedOptionSubscriptionPayload {
  mutation: MutationType!
  node: SelectedOption
  updatedFields: [String!]
  previousValues: SelectedOptionPreviousValues
}

input SelectedOptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SelectedOptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SelectedOptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SelectedOptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SelectedOptionWhereInput
}

input SelectedOptionUpdateInput {
  deletedAt: DateTime
  option: OptionUpdateOneInput
  variant: VariantUpdateOneWithoutSelectedOptionsInput
  value: OptionValueUpdateOneInput
}

input SelectedOptionUpdateManyWithoutVariantInput {
  create: [SelectedOptionCreateWithoutVariantInput!]
  connect: [SelectedOptionWhereUniqueInput!]
  disconnect: [SelectedOptionWhereUniqueInput!]
  delete: [SelectedOptionWhereUniqueInput!]
  update: [SelectedOptionUpdateWithWhereUniqueWithoutVariantInput!]
  upsert: [SelectedOptionUpsertWithWhereUniqueWithoutVariantInput!]
}

input SelectedOptionUpdateWithoutVariantDataInput {
  deletedAt: DateTime
  option: OptionUpdateOneInput
  value: OptionValueUpdateOneInput
}

input SelectedOptionUpdateWithWhereUniqueWithoutVariantInput {
  where: SelectedOptionWhereUniqueInput!
  data: SelectedOptionUpdateWithoutVariantDataInput!
}

input SelectedOptionUpsertWithWhereUniqueWithoutVariantInput {
  where: SelectedOptionWhereUniqueInput!
  update: SelectedOptionUpdateWithoutVariantDataInput!
  create: SelectedOptionCreateWithoutVariantInput!
}

input SelectedOptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SelectedOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SelectedOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SelectedOptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  option: OptionWhereInput
  variant: VariantWhereInput
  value: OptionValueWhereInput
}

input SelectedOptionWhereUniqueInput {
  id: ID
}

type Shop implements Node {
  id: ID!
  name: String!
  MOTD: String
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  newProducts(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct!]
  bestSellerProducts(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct!]
}

"""A connection to a list of items."""
type ShopConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShopEdge]!
  aggregate: AggregateShop!
}

input ShopCreateInput {
  name: String!
  MOTD: String
  products: ProductCreateManyWithoutShopInput
  newProducts: OrderableProductCreateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductCreateManyWithoutShopBestSellerInput
}

input ShopCreateOneInput {
  create: ShopCreateInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutBestSellerProductsInput {
  create: ShopCreateWithoutBestSellerProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutNewProductsInput {
  create: ShopCreateWithoutNewProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateWithoutBestSellerProductsInput {
  name: String!
  MOTD: String
  products: ProductCreateManyWithoutShopInput
  newProducts: OrderableProductCreateManyWithoutShopNewProductInput
}

input ShopCreateWithoutNewProductsInput {
  name: String!
  MOTD: String
  products: ProductCreateManyWithoutShopInput
  bestSellerProducts: OrderableProductCreateManyWithoutShopBestSellerInput
}

input ShopCreateWithoutProductsInput {
  name: String!
  MOTD: String
  newProducts: OrderableProductCreateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductCreateManyWithoutShopBestSellerInput
}

"""An edge in a connection."""
type ShopEdge {
  """The item at the end of the edge."""
  node: Shop!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShopOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  MOTD_ASC
  MOTD_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ShopPreviousValues {
  id: ID!
  name: String!
  MOTD: String
}

type ShopSubscriptionPayload {
  mutation: MutationType!
  node: Shop
  updatedFields: [String!]
  previousValues: ShopPreviousValues
}

input ShopSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShopSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShopSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShopSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShopWhereInput
}

input ShopUpdateDataInput {
  name: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpdateInput {
  name: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpdateOneInput {
  create: ShopCreateInput
  connect: ShopWhereUniqueInput
  delete: Boolean
  update: ShopUpdateDataInput
  upsert: ShopUpsertNestedInput
}

input ShopUpdateOneWithoutBestSellerProductsInput {
  create: ShopCreateWithoutBestSellerProductsInput
  connect: ShopWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ShopUpdateWithoutBestSellerProductsDataInput
  upsert: ShopUpsertWithoutBestSellerProductsInput
}

input ShopUpdateOneWithoutNewProductsInput {
  create: ShopCreateWithoutNewProductsInput
  connect: ShopWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ShopUpdateWithoutNewProductsDataInput
  upsert: ShopUpsertWithoutNewProductsInput
}

input ShopUpdateOneWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  connect: ShopWhereUniqueInput
  delete: Boolean
  update: ShopUpdateWithoutProductsDataInput
  upsert: ShopUpsertWithoutProductsInput
}

input ShopUpdateWithoutBestSellerProductsDataInput {
  name: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
}

input ShopUpdateWithoutNewProductsDataInput {
  name: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpdateWithoutProductsDataInput {
  name: String
  MOTD: String
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpsertNestedInput {
  update: ShopUpdateDataInput!
  create: ShopCreateInput!
}

input ShopUpsertWithoutBestSellerProductsInput {
  update: ShopUpdateWithoutBestSellerProductsDataInput!
  create: ShopCreateWithoutBestSellerProductsInput!
}

input ShopUpsertWithoutNewProductsInput {
  update: ShopUpdateWithoutNewProductsDataInput!
  create: ShopCreateWithoutNewProductsInput!
}

input ShopUpsertWithoutProductsInput {
  update: ShopUpdateWithoutProductsDataInput!
  create: ShopCreateWithoutProductsInput!
}

input ShopWhereInput {
  """Logical AND on all given filters."""
  AND: [ShopWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShopWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShopWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  MOTD: String

  """All values that are not equal to given value."""
  MOTD_not: String

  """All values that are contained in given list."""
  MOTD_in: [String!]

  """All values that are not contained in given list."""
  MOTD_not_in: [String!]

  """All values less than the given value."""
  MOTD_lt: String

  """All values less than or equal the given value."""
  MOTD_lte: String

  """All values greater than the given value."""
  MOTD_gt: String

  """All values greater than or equal the given value."""
  MOTD_gte: String

  """All values containing the given string."""
  MOTD_contains: String

  """All values not containing the given string."""
  MOTD_not_contains: String

  """All values starting with the given string."""
  MOTD_starts_with: String

  """All values not starting with the given string."""
  MOTD_not_starts_with: String

  """All values ending with the given string."""
  MOTD_ends_with: String

  """All values not ending with the given string."""
  MOTD_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  newProducts_every: OrderableProductWhereInput
  newProducts_some: OrderableProductWhereInput
  newProducts_none: OrderableProductWhereInput
  bestSellerProducts_every: OrderableProductWhereInput
  bestSellerProducts_some: OrderableProductWhereInput
  bestSellerProducts_none: OrderableProductWhereInput
}

input ShopWhereUniqueInput {
  id: ID
}

type Subscription {
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  attribute(where: AttributeSubscriptionWhereInput): AttributeSubscriptionPayload
  option(where: OptionSubscriptionWhereInput): OptionSubscriptionPayload
  optionValue(where: OptionValueSubscriptionWhereInput): OptionValueSubscriptionPayload
  selectedOption(where: SelectedOptionSubscriptionWhereInput): SelectedOptionSubscriptionPayload
  variant(where: VariantSubscriptionWhereInput): VariantSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderLineItem(where: OrderLineItemSubscriptionWhereInput): OrderLineItemSubscriptionPayload
  shop(where: ShopSubscriptionWhereInput): ShopSubscriptionPayload
  orderableProduct(where: OrderableProductSubscriptionWhereInput): OrderableProductSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  selectedShop(where: ShopWhereInput): Shop!
  role: Role!
  cart(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  stripeCustomerId: String
  oneSignalUserId: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  role: Role
  stripeCustomerId: String
  oneSignalUserId: String
  selectedShop: ShopCreateOneInput!
  cart: OrderLineItemCreateManyWithoutOwnerInput
  orders: OrderCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCartInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  role: Role
  stripeCustomerId: String
  oneSignalUserId: String
  selectedShop: ShopCreateOneInput!
  orders: OrderCreateManyWithoutOwnerInput
}

input UserCreateWithoutOrdersInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  role: Role
  stripeCustomerId: String
  oneSignalUserId: String
  selectedShop: ShopCreateOneInput!
  cart: OrderLineItemCreateManyWithoutOwnerInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  role_ASC
  role_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  oneSignalUserId_ASC
  oneSignalUserId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  role: Role!
  stripeCustomerId: String
  oneSignalUserId: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  role: Role
  stripeCustomerId: String
  oneSignalUserId: String
  selectedShop: ShopUpdateOneInput
  cart: OrderLineItemUpdateManyWithoutOwnerInput
  orders: OrderUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateWithoutCartDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  role: Role
  stripeCustomerId: String
  oneSignalUserId: String
  selectedShop: ShopUpdateOneInput
  orders: OrderUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutOrdersDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  role: Role
  stripeCustomerId: String
  oneSignalUserId: String
  selectedShop: ShopUpdateOneInput
  cart: OrderLineItemUpdateManyWithoutOwnerInput
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  oneSignalUserId: String

  """All values that are not equal to given value."""
  oneSignalUserId_not: String

  """All values that are contained in given list."""
  oneSignalUserId_in: [String!]

  """All values that are not contained in given list."""
  oneSignalUserId_not_in: [String!]

  """All values less than the given value."""
  oneSignalUserId_lt: String

  """All values less than or equal the given value."""
  oneSignalUserId_lte: String

  """All values greater than the given value."""
  oneSignalUserId_gt: String

  """All values greater than or equal the given value."""
  oneSignalUserId_gte: String

  """All values containing the given string."""
  oneSignalUserId_contains: String

  """All values not containing the given string."""
  oneSignalUserId_not_contains: String

  """All values starting with the given string."""
  oneSignalUserId_starts_with: String

  """All values not starting with the given string."""
  oneSignalUserId_not_starts_with: String

  """All values ending with the given string."""
  oneSignalUserId_ends_with: String

  """All values not ending with the given string."""
  oneSignalUserId_not_ends_with: String
  selectedShop: ShopWhereInput
  cart_every: OrderLineItemWhereInput
  cart_some: OrderLineItemWhereInput
  cart_none: OrderLineItemWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Variant implements Node {
  id: ID!
  deletedAt: DateTime
  selectedOptions(where: SelectedOptionWhereInput, orderBy: SelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SelectedOption!]
  price: Float!
  available: Boolean!
  product(where: ProductWhereInput): Product
}

"""A connection to a list of items."""
type VariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VariantEdge]!
  aggregate: AggregateVariant!
}

input VariantCreateInput {
  deletedAt: DateTime
  price: Float!
  available: Boolean!
  selectedOptions: SelectedOptionCreateManyWithoutVariantInput
  product: ProductCreateOneWithoutVariantsInput
}

input VariantCreateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  connect: [VariantWhereUniqueInput!]
}

input VariantCreateOneInput {
  create: VariantCreateInput
  connect: VariantWhereUniqueInput
}

input VariantCreateOneWithoutSelectedOptionsInput {
  create: VariantCreateWithoutSelectedOptionsInput
  connect: VariantWhereUniqueInput
}

input VariantCreateWithoutProductInput {
  deletedAt: DateTime
  price: Float!
  available: Boolean!
  selectedOptions: SelectedOptionCreateManyWithoutVariantInput
}

input VariantCreateWithoutSelectedOptionsInput {
  deletedAt: DateTime
  price: Float!
  available: Boolean!
  product: ProductCreateOneWithoutVariantsInput
}

"""An edge in a connection."""
type VariantEdge {
  """The item at the end of the edge."""
  node: Variant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VariantOrderByInput {
  id_ASC
  id_DESC
  deletedAt_ASC
  deletedAt_DESC
  price_ASC
  price_DESC
  available_ASC
  available_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VariantPreviousValues {
  id: ID!
  deletedAt: DateTime
  price: Float!
  available: Boolean!
}

type VariantSubscriptionPayload {
  mutation: MutationType!
  node: Variant
  updatedFields: [String!]
  previousValues: VariantPreviousValues
}

input VariantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VariantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VariantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VariantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VariantWhereInput
}

input VariantUpdateDataInput {
  deletedAt: DateTime
  price: Float
  available: Boolean
  selectedOptions: SelectedOptionUpdateManyWithoutVariantInput
  product: ProductUpdateOneWithoutVariantsInput
}

input VariantUpdateInput {
  deletedAt: DateTime
  price: Float
  available: Boolean
  selectedOptions: SelectedOptionUpdateManyWithoutVariantInput
  product: ProductUpdateOneWithoutVariantsInput
}

input VariantUpdateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  connect: [VariantWhereUniqueInput!]
  disconnect: [VariantWhereUniqueInput!]
  delete: [VariantWhereUniqueInput!]
  update: [VariantUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [VariantUpsertWithWhereUniqueWithoutProductInput!]
}

input VariantUpdateOneInput {
  create: VariantCreateInput
  connect: VariantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VariantUpdateDataInput
  upsert: VariantUpsertNestedInput
}

input VariantUpdateOneWithoutSelectedOptionsInput {
  create: VariantCreateWithoutSelectedOptionsInput
  connect: VariantWhereUniqueInput
  delete: Boolean
  update: VariantUpdateWithoutSelectedOptionsDataInput
  upsert: VariantUpsertWithoutSelectedOptionsInput
}

input VariantUpdateWithoutProductDataInput {
  deletedAt: DateTime
  price: Float
  available: Boolean
  selectedOptions: SelectedOptionUpdateManyWithoutVariantInput
}

input VariantUpdateWithoutSelectedOptionsDataInput {
  deletedAt: DateTime
  price: Float
  available: Boolean
  product: ProductUpdateOneWithoutVariantsInput
}

input VariantUpdateWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  data: VariantUpdateWithoutProductDataInput!
}

input VariantUpsertNestedInput {
  update: VariantUpdateDataInput!
  create: VariantCreateInput!
}

input VariantUpsertWithoutSelectedOptionsInput {
  update: VariantUpdateWithoutSelectedOptionsDataInput!
  create: VariantCreateWithoutSelectedOptionsInput!
}

input VariantUpsertWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  update: VariantUpdateWithoutProductDataInput!
  create: VariantCreateWithoutProductInput!
}

input VariantWhereInput {
  """Logical AND on all given filters."""
  AND: [VariantWhereInput!]

  """Logical OR on all given filters."""
  OR: [VariantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VariantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deletedAt: DateTime

  """All values that are not equal to given value."""
  deletedAt_not: DateTime

  """All values that are contained in given list."""
  deletedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  deletedAt_not_in: [DateTime!]

  """All values less than the given value."""
  deletedAt_lt: DateTime

  """All values less than or equal the given value."""
  deletedAt_lte: DateTime

  """All values greater than the given value."""
  deletedAt_gt: DateTime

  """All values greater than or equal the given value."""
  deletedAt_gte: DateTime
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  available: Boolean

  """All values that are not equal to given value."""
  available_not: Boolean
  selectedOptions_every: SelectedOptionWhereInput
  selectedOptions_some: SelectedOptionWhereInput
  selectedOptions_none: SelectedOptionWhereInput
  product: ProductWhereInput
}

input VariantWhereUniqueInput {
  id: ID
}
